[
    {
        "id":1,
        "image":"https://i.postimg.cc/HnSJbndF/cors.png",
        "title":"CORS",
        "question":"What is CORS?",
        "description":"CORS stands for Cross-Origin Resource Sharing. It allows us to relax the security applied to an API. This is done by bypassing the Access-Control-Allow-Origin headers, which specify which origins can access the API. Cross-Origin Resource Sharing (CORS) is an HTTP-header based mechanism that allows a server to indicate any origins (domain, scheme, or port) other than its own from which a browser should permit loading resources. CORS allows you to configure the web API's security. It has to do with allowing other domains to make requests against your web API. For example, if you had your web API on one server and your web app on another you could configure CORS in your Web API to allow your web app to make calls to your web API. The way to use CORS in node JS Express is, run the server with npm nodemon . Navigate to http://localhost:6069/ingredients on your browser. You will be served with these ingredients text items. In this example, cross-origin is allowed because you're currently on the same domain, and you are executing this request from the same domain."
    },
    {
        "id":2,
        "image":"https://i.postimg.cc/cL7Szj8L/firebase.webp",
        "title":"Firebase",
        "question":"Why we use firebase? What other options do you have to implement authentication?",
        "description":"Firebase provides detailed documentation and cross-platform SDKs to help you build and ship apps on Android, iOS, the web, C++, and Unity. It allows real-time database connection, which means multiple users can see the changes in the data when the data gets created or edited. Data transmission is handled with web sockets so you don't have to send requests to get new data, you only need to subscribe once. Frontend Developers can use Firebase to store and retrieve data to and from a NoSQL database called Firestore, as well as to authenticate their app's users with the Firebase Auth service. While Firestore, the Realtime Database is really just one big JSON object that the developers can manage in realtime. \n The other options to implement authentication is STYTCH, ORY, Supabase, Okta, Authress, AuthO."
    },
    {
        "id":3,
        "image": "https://i.postimg.cc/W3dpx8vY/node.png",
        "title":"Private Route",
        "question":"How does the private route work?",
        "description":"The private route component is used to protect selected pages in a React app from unauthenticated users. The private route component is similar to the public route, the only change is that redirect URL and authenticate condition. If the user is not authenticated he will be redirected to the login page and the user can only access the authenticated routes If he is authenticated (Logged in). The react private route component renders child components ( children ) if the user is logged in. If not logged in the user is redirected to the /login page with the return url passed in the location state property."
    },
    {
        "id":4,
        "image": "https://i.postimg.cc/g24YJQcB/privateroute.jpg",
        "title":"Node.js",
        "question": "What is Node? How does Node work?",
        "description": "As an asynchronous event-driven JavaScript runtime, Node.js is designed to build scalable network applications. Node.js is an open-source, cross-platform, back-end JavaScript runtime environment that runs on a JavaScript Engine and executes JavaScript code outside a web browser, which was designed to build scalable network applications. It is a used as backend service where javascript works on the server-side of the application. This way javascript is used on both frontend and backend. Node. js runs on chrome v8 engine which converts javascript code into machine code, it is highly scalable, lightweight, fast, and data-intensive. Node JS Web Server internally maintains a Limited Thread pool to provide services to the Client Requests. Node JS Web Server receives those requests and places them into a Queue. It is known as “Event Queue”. Node JS Web Server internally has a Component, known as “Event Loop”."
    }
   
]